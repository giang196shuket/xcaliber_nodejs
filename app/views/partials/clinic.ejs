  <%- contentFor('style') %> 
  <%- contentFor('content') %>
  <ul class="nav nav-tabs">
    <li class="nav-item">
      <a class="nav-link active" data-toggle="tab" href="#map-tab">MAP</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" data-toggle="tab" href="#area-tab" onclick="fetchArea()">AREA</a>
    </li>
  </ul>

  <div class="container-fluid">
    <div class="tab-content">
      <div role="tabpanel" class="tab-pane  in active" id="map-tab">
        <div id="box-search">
          <div class="input-group">
            <input type="text" id="search-keyword" onkeyup="inputClinic()" onpaste="inputClinic(event)"  class="form-control" />
            <div class="input-group-btn">
              <button class="btn btn-default" type="submit" onclick="handleSearch()">
                <i class="fa fa-search fa-lg"></i> 
              </button>
            </div>
          </div>
          <div id="result-search" ></div>
        </div>
        
        <div id="box-map">
          <div id="map" style="width: 100%; height: 720px" class="mt-3"></div>
          <button class="btn btn-primary" id="btn-zoom" onclick="changePositionList()">GET CURRENT AREA</button>
          <button class="btn btn-info" id="btn-position" onclick="getUserCurrentPosition()">GET YOUR LOCATION</button>
        </div>
        <div id="position-list" class="d-flex flex-wrap mt-3 justify-content-center" style="gap: 5%"></div>

      </div>
      <div role="tabpanel" class="tab-pane " id="area-tab">
        <div class="d-flex" style="gap: 30px;">
          <div id="area1" style="width: 35%; height: 30rem; overflow-y: scroll; text-align: center;">

          </div>
          <div id="area2" style="width: 35%; height: 30rem; overflow-y: scroll; text-align: center;">

          </div>
          <div id="address"  style="width: 35%; height: 30rem; overflow-y: scroll; text-align: center;">

          </div>
        </div>
        
      </div>
    </div>
  </div>



  <%- contentFor('script') %>

  <script>
    let hospitalsData = [];
    let postitionList = []
    let area1Default = null
    let area2Default = null
    const latDefault = 37.3595704
    const lngDefault = 127.105399
    let infowindow = new naver.maps.InfoWindow();

  window.onpageshow = async function (event) {
      if (event.persisted) {
      }
  };

  const fetchNaverMap = (lat,lng ) =>{
      let mapOptions = {
        center: new naver.maps.LatLng(lat, lng),
        zoom: 14,
      };
    map = new naver.maps.Map("map", mapOptions); // global map
    naver.maps.Event.addListener(map, 'click', function(e) {
         // remove  all title element
        let elements = document.querySelectorAll('[id^="hospital"]');
        elements.forEach(function (element) {
          element.style.display = "none";
        });
    });
       naver.maps.Event.addListener(map, 'zoom_changed', function(zoom) {
        console.log('zoom event');
      });
      naver.maps.Event.addListener(map, 'bounds_changed', function(bounds) {
        console.log('grab event');
      });  
  }
  const fetchListMapBelow = (postitionList) =>{
      let HTML =""
      if (postitionList.length > 0) {
            for (let data of postitionList) {
              HTML += `   
              <div class="card" style="width: 30%;">
                <div class="card-body">
                  <h5 class="card-title">${data.hospital_name}</h5>
                  <p class="card-text">${data.address}</p>
                  <a target="_blank" href="${data.naver_link}"  >OPEN NAVER MAP</a>
                </div>
              </div>                 `;}
          document.getElementById("position-list").innerHTML = HTML;
      }
  }

  const fetchMarkerMap = (hospital, resultSearch) =>{
    let content = ``
    if(resultSearch){
      content = ( hospital.lat === resultSearch.lat &&   hospital.lng === resultSearch.lng ) ?
        `<div  class='p-1 rounded d-flex align-items-start' style="gap:5px;">  
          <img src="/assets/images/custom_marker.png" style=" display: block;">
              <p id="hospital-${hospital.id}" style="background-color: white; display: block; padding: 5px; border-radius: 10px;
              border: 1px solid black;
              ">${hospital.address}<p/></div> `
        : `<div  class='p-1 rounded d-flex align-items-start' style="gap:5px;">  
          <img src="/assets/images/custom_marker.png" style=" display: block;">
              <p id="hospital-${hospital.id}" style="background-color: white; display: none; padding: 5px; border-radius: 10px;
              border: 1px solid black;
              ">${hospital.address}<p/></div> `
    }else{
      content =` <div class='p-1 rounded d-flex align-items-start' style="gap:5px;">  
        <img src="/assets/images/custom_marker.png" style=" display: block;">
          <p id="hospital-${hospital.id}" style="background-color: white; display: none; padding: 5px; border-radius: 10px;
          border: 1px solid black;
          ">${hospital.address}<p/></div> `
    }
    let position = new naver.maps.LatLng(hospital.lat, hospital.lng);
    let marker = new naver.maps.Marker({
      position: position,
      map: map,
      icon: {
        content: content ,
        size: new naver.maps.Size(63, 81),
        origin: new naver.maps.Point(0, 0),
        anchor: new naver.maps.Point(31, 40),
      },
      zIndex: 100
   });
    marker.addListener("click", function () {
      // find all element clicked => display none
      let elements = document.querySelectorAll('[id^="hospital"]');
      elements.forEach(function (element) {
        if(element.id === `hospital-${hospital.id}` ){
          element.style.display = "block";
        }else{
          element.style.display = "none";
        }
      });
    });
  }

  document.addEventListener("DOMContentLoaded", async function () {
      hospitalsData = await getHospitalList();
      fetchNaverMap(latDefault, lngDefault) // fetch naver map 
      let bounds = map.getBounds()
      southWest = bounds.getSW()
      northEast = bounds.getNE()
      for (const hospital of hospitalsData) {
        fetchMarkerMap(hospital, null) // generate marker map
        // get list position current of invisible map
        if(hospital.lat <= northEast._lat && hospital.lat >= southWest._lat  && hospital.lng <= northEast._lng && hospital.lng >= southWest._lng){
          postitionList.push(hospital);
        }
      }
      //show position list
      fetchListMapBelow(postitionList) // generate list below
    });

   const changePositionList = () =>{
      postitionList = []
      document.getElementById("position-list").innerHTML = "";

      let bounds = map.getBounds()
      southWest = bounds.getSW()
      northEast = bounds.getNE()

      for (const hospital of hospitalsData) {
        if(hospital.lat <= northEast._lat && hospital.lat >= southWest._lat  && hospital.lng <= northEast._lng && hospital.lng >= southWest._lng){
          postitionList.push(hospital);
        }
      }
      fetchListMapBelow(postitionList) // generate list below
  }

    let processSearch = false;
    const handleSearch = async () =>{
      //catch click dup
      if (processSearch == true) return;
      processSearch = true;

      const keyword = document.getElementById("search-keyword").value
      if(keyword === ""){
        return
      }
      //search  서울 
      const resultSearch = await searchHospital(keyword)
      // const resultSearch = hospitalsData.find((hos) => hos.address.trim() === keyword.trim())
      if(resultSearch){
        //reset clicked location
        let elements = document.querySelectorAll('[id^="hospital"]');
          elements.forEach(function (element) {
            element.style.display = "none";
          });

      fetchNaverMap(resultSearch.lat, resultSearch.lng)  // fetch naver map when search hospital

      for (const hospital of hospitalsData) {
         fetchMarkerMap(hospital, resultSearch) // generate marker map with data hospital search to show title 
      }
      changePositionList() // change list position below

    }
      processSearch = false;

    }

    const clickResult = (address) =>{
      document.getElementById("search-keyword").value = address
      // reset box result
      let resultDataEle = document.getElementById("result-search")
      resultDataEle.innerHTML = ""
      resultDataEle.style.display = 'none'
    }

    const  inputClinic =  async (event) =>{
      // reset box result
      let resultDataEle = document.getElementById("result-search")
      resultDataEle.innerHTML = ""
      resultDataEle.style.display = 'none'

      let keyword = document.getElementById("search-keyword").value;
      
      if(event){
        // paste keyword
        let clipboardData = event.clipboardData || window.clipboardData;
        let pastedData = clipboardData.getData('text');
        keyword += pastedData
      }


      if(keyword === ""){
        return
      }

      const result = await getHospitalListSearch(keyword)
      let HTML = ""
      if(result.length > 0){
        for (let data of result) {
          HTML += `                    
          <p id='row-search' onclick="clickResult('${data.address}')">${data.address} </p>
          `;
          
        }
      // assign again box result
      document.getElementById("result-search").innerHTML = HTML;
      resultDataEle.style.display = 'block'
      }
    }
    const searchHospital = async (keyword) => {
      let callApi = `/api/main/searchHospital`;
      const result = await axios
        .post(callApi, {keyword: keyword})
        .then((response) => {
          return response.data.data;
        })
        .catch((error) => {
          return null;
        });
      return result;
    };

    const getHospitalListSearch = async (keyword) => {
      let callApi = `/api/main/getHospitalListSearch`;
      const result = await axios
        .post(callApi, {keyword: keyword})
        .then((response) => {
          return response.data.data;
        })
        .catch((error) => {
          return null;
        });
      return result;
    };

    const getHospitalList = async () => {
      let callApi = `/api/main/getHospitalList`;
      const result = await axios
        .post(callApi, {})
        .then((response) => {
          return response.data.data;
        })
        .catch((error) => {
          return null;
        });
      return result;
    };

  function getUserCurrentPosition() {
    if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(onSuccessGeolocation, onErrorGeolocation);
      } else {
          let center = map.getCenter();
          infowindow.setContent('<div style="padding:20px;"><h5 style="margin-bottom:5px;color:#f00;">Geolocation not supported</h5></div>');
          infowindow.open(map, center);
      }
  }

  function onSuccessGeolocation(position) {
      let location = new naver.maps.LatLng(position.coords.latitude,
                                          position.coords.longitude);
      map.setCenter(location); // Set the center coordinates of a map.
      map.setZoom(12); 
      infowindow.setContent('<div style="padding:20px;color:#000;font-size:20px;">' + '현재 위치' + '</div>');
      infowindow.open(map, location);
      changePositionList() // change list position below
  }

  function onErrorGeolocation() {
      let center = map.getCenter();
      infowindow.setContent('<div style="padding:20px;">' +
          '<h5 style="margin-bottom:5px;color:#f00;">Geolocation failed!</h5>'+ "latitude: "+ center.lat() +"<br />longitude: "+ center.lng() +'</div>');
      infowindow.open(map, center);
  }

  //area 
  //area 
  //area 
  const changeArea2 = async (id, area2) =>{
    let elements = document.querySelectorAll('[id^="area2"]');
        elements.forEach(function (element) {
        if(element.id === `area2-${id}` ){
          element.classList.remove("text-dark");
          element.classList.add("text-primary");
        }else{
          element.classList.remove("text-primary");
        }
    });
      //address 
      document.getElementById("address").innerHTM = "" //reset
      area2Default = area2

      const result3 = await getAddress(area1Default, area2Default)

        let HTML3 = "";
        if(result3.length > 0){
        for (const data3 of result3) {
          HTML3 += `                    
                <div style="width:100%">
                  <p>${data3.hospital_name}<p>
                  <p>${data3.address}<p>
                  <a target="_blank" href="${data3.naver_link}" ">OPEN NAVER MAP</a>
                  <hr/>
                </div>`;
        }
        document.getElementById("address").innerHTML = HTML3;
        }
  }
  
  const changeArea1 = async (id, area1) =>{
    let elements = document.querySelectorAll('[id^="area1"]');
        elements.forEach(function (element) {
        if(element.id === `area1-${id}` ){
          element.classList.remove("text-dark");
          element.classList.add("text-primary");
        }else{
          element.classList.remove("text-primary");
        }
    });
    //area2
    document.getElementById("area2").innerHTM = "" //reset
    area1Default = area1
    const result2 = await getArea2(area1Default)
        let HTML2 = "";
        if(result2.length > 0){
        area2Default = result2[0].area2 // set default
        for (const data2 of result2) {
          HTML2 += `                    
                <p  style="cursor:pointer" id="area2-${data2.id}"  class='${area2Default === data2.area2 ? 'text-primary' : 'text-dark'}' onclick="changeArea2('${data2.id}','${data2.area2}')">${data2.area2}<p>`;
        }
        document.getElementById("area2").innerHTML = HTML2;
    }
  }

  const fetchArea = async () =>{
    //area1
    const result1 = await getArea1()

    let HTML1 = "";
    if(result1.length > 0){
        area1Default = result1[0].area1 // set default
        for (const data1 of result1) {
          HTML1 += `                    
                <p style="cursor:pointer" id="area1-${data1.id}" class='${area1Default === data1.area1 ? 'text-primary' : 'text-dark'}' onclick="changeArea1('${data1.id}','${data1.area1}')" >${data1.area1}<p>`;
        }
        document.getElementById("area1").innerHTML = HTML1;
        //area2
        const result2 = await getArea2(area1Default)

        let HTML2 = "";
        if(result2.length > 0){
        area2Default = result2[0].area2 // set default
        for (const data2 of result2) {
          HTML2 += `                    
                <p  style="cursor:pointer" id="area2-${data2.id}"  class='${area2Default === data2.area2 ? 'text-primary' : 'text-dark'}' onclick="changeArea2('${data2.id}','${data2.area2}')" >${data2.area2}<p>`;
        }
        document.getElementById("area2").innerHTML = HTML2;
        
        //address 
        const result3 = await getAddress(area1Default, area2Default)

        let HTML3 = "";
        if(result3.length > 0){
        for (const data3 of result3) {
          HTML3 += `                    
                <div class="card" style="width: 100%;">
                <div class="card-body">
                  <h5 class="card-title">${data3.hospital_name}</h5>
                  <p class="card-text">${data3.address}</p>
                  <a target="_blank" href="${data3.naver_link}" >OPEN NAVER MAP</a>
                </div>
              </div>  
                `;
        }
        document.getElementById("address").innerHTML = HTML3;
        }
      }
    }
  }

  const getArea1 = async () => {
      let callApi = `/api/main/getArea1`;
      const result = await axios
        .post(callApi, {})
        .then((response) => {
          return response.data.data;
        })
        .catch((error) => {
          return [];
        });
      return result;
    };

    const getArea2 = async (area1) => {
      let callApi = `/api/main/getArea2`;
      const result = await axios
        .post(callApi, {area1: area1})
        .then((response) => {
          return response.data.data;
        })
        .catch((error) => {
          return [];
        });
      return result;
    };

    const getAddress = async (area1, area2) => {
      let callApi = `/api/main/getAddress`;
      const result = await axios
        .post(callApi, {area1: area1, area2: area2})
        .then((response) => {
          return response.data.data;
        })
        .catch((error) => {
          return [];
        });
      return result;
    };


  </script>
